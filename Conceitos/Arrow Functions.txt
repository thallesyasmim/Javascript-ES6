const arr = [1, 3, 4, 5, 6]

const newArr = arr.map((item) => { // Essa função não tem um nome, é uma função que consideramos anônima!e esse é o melhor lugar para utlizarmos nossa arrow function! removemos o function e depois das chave3s colocamos um sinal de igual e de maior.
    return item * 2
})

console.log(newArr)

const arr = [1, 3, 4, 5, 6]

const newArr = arr.map( item => { // Quando a função só tem um parâmetro podemos também remover os parênteses.
    return item * 2
})

console.log(newArr)


const arr = [1, 3, 4, 5, 6]

const newArr = arr.map( item => item * 2) // Quando temos o retorno só de uma informação e não um corpo da função (um monte de código), podemos diminuir ainda mais o código o deixando assim:

console.log(newArr)


Quando temos por exemplo uma function soma() por exemplo, não é uma boa utlizarmos as Arrow Functions, mas em casos assim de 
funções anônimas é ótimo utlizarmos, ainda mais porque o Javascript tem muito isso de callbacks, ou seja, funções passadas dentro de outras funções.


/**
 * Podmeos criar funções utlizando constantes, por exemplo:
 *  Ao ínves de fazermos function teste(), podemos fazer
 *  const test = () => {} (PORÉM NÃO É RECOMENDADO) 
 */

const teste = () => {
    return 'teste'
}

console.log(teste())

const teste1 = () => { nome: 'Yasmim' } // Não funciona porque as chaves são usadas para o corpo da função

const teste2 = () => {
    return { nome: 'Yasmim' } // Já assim funcionaria
}

const teste = () => ({ nome: 'Yasmim Maravilhosa'}) // Se quisermos retornar um objeto nesssa mesma linha podemos utlizra os parênteses em volta das chaves.
